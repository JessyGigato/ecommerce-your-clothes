/// <reference types="node" />
import { PathLike } from 'fs';
import { EventEmitter } from '@inceptjs/framework';
import { Volume as MemVolume } from 'memfs';
import { TDataOut } from 'memfs/lib/encoding';
import { TFileId, Volume } from 'memfs/lib/volume';
import Stats from 'memfs/lib/Stats';
export default class VirtualFS extends MemVolume {
    protected _emitter: EventEmitter;
    protected _revertFS: Function | null;
    protected _transformers: Transformer[];
    protected _originals: Record<string, Function>;
    addRule(test: RegExp | Function, callback: Function): VirtualFS;
    exists(path: PathLike, callback: (exists: boolean) => void): void;
    existsSync(path: PathLike): boolean;
    lstat(path: PathLike, ...args: any): any;
    lstatSync(path: PathLike): Stats<number>;
    lstatSync(path: PathLike, options: {
        bigint: false;
    }): Stats<number>;
    lstatSync(path: PathLike, options: {
        bigint: true;
    }): Stats<bigint>;
    modulePaths(pathname: string, parent?: string): string[];
    patchFS(): VirtualFS;
    readFileSync(id: TFileId, ...args: any): TDataOut;
    readFile(id: TFileId, ...args: any): void;
    resolvePath(request: string, paths?: string[], context?: any): string | boolean;
    resolveModule(name: string, parent: string): string | boolean;
    revertPatch(): Volume;
    route(path: string, router: Function): Volume;
    routeParams(file: string, route: string): Record<string, any>;
    stat(path: PathLike, ...args: any): any;
    statSync(path: PathLike): Stats<number>;
    statSync(path: PathLike, options: {
        bigint: false;
    }): Stats<number>;
    statSync(path: PathLike, options: {
        bigint: true;
    }): Stats<bigint>;
    transform(file: string, body: string | Buffer): string | Buffer;
    protected _findPath(request: string, paths: string[], isMain: boolean): string | boolean;
    protected _resolveFile(file: string): VirtualFS;
}
declare const vfs: VirtualFS;
export { vfs };
export declare type Transformer = {
    test: RegExp | Function;
    callback: Function;
};
