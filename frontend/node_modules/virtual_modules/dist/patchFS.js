"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const fs = fs_1.default;
const syncToPatch = [
    'readFileSync',
    'existsSync',
    'lstatSync',
    'statSync',
    'realpathSync',
    'readdirSync'
];
const asyncToPatch = [
    'readFile',
    'exists',
    'lstat',
    'stat',
    'realpath',
    'readdir'
];
function syncMethod(method, original, vfs) {
    return (...args) => {
        let results;
        try {
            results = original[method].apply(fs, args);
        }
        catch (fsError) {
            try {
                return vfs[method].apply(vfs, args);
            }
            catch (vfsError) {
                throw fsError;
            }
        }
        if (results === false) {
            return vfs[method].apply(vfs, args);
        }
        return results;
    };
}
function asyncMethod(method, original, vfs) {
    return (...args) => {
        let callback = null;
        if (typeof args[args.length - 1] === 'function') {
            callback = args.pop();
        }
        try {
            const results = syncMethod(`${method}Sync`, original, vfs).apply(null, args);
            if (typeof callback === 'function') {
                callback(null, results);
            }
            else {
                return {
                    then: function (callback) {
                        callback(results);
                        return this;
                    },
                    catch: function (callback) {
                        return this;
                    }
                };
            }
        }
        catch (error) {
            if (typeof callback === 'function') {
                callback(error, null);
            }
            else {
                return {
                    then: function (callback) {
                        return this;
                    },
                    catch: function (callback) {
                        callback(error);
                        return this;
                    }
                };
            }
        }
    };
}
function patchFS(vfs) {
    const original = {};
    for (const method of syncToPatch) {
        original[method] = fs[method];
        fs[method] = syncMethod(method, original, vfs);
    }
    for (const method of asyncToPatch) {
        original[method] = fs[method];
        fs[method] = asyncMethod(method, original, vfs);
    }
    return function revertFS() {
        for (const method of syncToPatch) {
            fs[method] = original[method];
        }
        for (const method of asyncToPatch) {
            fs[method] = original[method];
        }
    };
}
exports.default = patchFS;
