"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseTypes = void 0;
const node_fetch_1 = require("node-fetch");
const Body_1 = __importDefault(require("./Body"));
const Exception_1 = __importDefault(require("./Exception"));
var ResponseTypes;
(function (ResponseTypes) {
    ResponseTypes["Basic"] = "basic";
    ResponseTypes["CORS"] = "cors";
})(ResponseTypes = exports.ResponseTypes || (exports.ResponseTypes = {}));
;
class Response extends Body_1.default {
    constructor(body = null, init = {}) {
        super(body, init);
        this._redirected = false;
        if (typeof init.url === 'string') {
            this._url = new URL(init.url);
        }
        this._type = init.type || ResponseTypes.Basic;
        this._status = {
            code: init.status || 0,
            text: init.statusText || ''
        };
    }
    get ok() {
        return 200 <= this._status.code && this._status.code <= 299;
    }
    get redirected() {
        return this._redirected;
    }
    get status() {
        return this._status.code;
    }
    get statusText() {
        return this._status.text;
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
    }
    clone() {
        return new Response(this._body, this._getInit());
    }
    redirect(url, status) {
        this._redirected = true;
        this._url = new URL(url);
        if (typeof status === 'number') {
            this._status.code = status;
        }
        else {
            if (typeof (status === null || status === void 0 ? void 0 : status.code) === 'number') {
                this._status.code = status.code;
            }
            if (typeof (status === null || status === void 0 ? void 0 : status.text) === 'string') {
                this._status.text = status.text;
            }
        }
        return this;
    }
    setStatus(code, text) {
        if (typeof code === 'number') {
            Exception_1.default.require(typeof text === 'string', 'Argument 2 expected string');
            this._status = { code, text };
            return this;
        }
        const status = code;
        Exception_1.default.require(typeof status.code === 'number'
            && typeof status.text === 'string', 'Argument 1 exprected number or Status');
        this._status = status;
        return this;
    }
    _getInit() {
        return {
            status: this._status.code,
            text: this._status.text,
            type: this._type,
            url: this.url !== '' ? this.url : undefined
        };
    }
    _getResource() {
        let body = this._body || null;
        if ((body === null || body === void 0 ? void 0 : body.constructor) === Object
            && typeof body.pipe !== 'function') {
            body = JSON.stringify(body);
        }
        return new node_fetch_1.Response(body, this._getInit());
    }
}
exports.default = Response;
