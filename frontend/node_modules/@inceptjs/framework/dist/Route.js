"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@inceptjs/types");
const Request_1 = __importDefault(require("./Request"));
const Response_1 = __importDefault(require("./Response"));
const Exception_1 = __importDefault(require("./Exception"));
class Route {
    constructor(event, router) {
        Exception_1.default.require(typeof event === 'string', 'Argument 1 expected String');
        Exception_1.default.require(router instanceof types_1.EventEmitter, 'Argument 2 expected Router');
        this.event = event;
        this.router = router;
    }
    all(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, '[A-Z]+', callbacks, priority);
    }
    connect(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'CONNECT', callbacks, priority);
    }
    delete(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'DELETE', callbacks, priority);
    }
    get(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'GET', callbacks, priority);
    }
    dispatch(request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(request instanceof Request_1.default, 'Argument 1 expected Request');
            Exception_1.default.require(response instanceof Response_1.default, 'Argument 2 expected Response');
            let status = types_1.Statuses.OK;
            try {
                status = yield this.router.emit('response', request, response);
            }
            catch (error) {
                response.setStatus(types_1.Statuses.ERROR);
                status = yield this.router.emit('error', error, request, response);
            }
            return status.code !== types_1.Statuses.ABORT.code;
        });
    }
    handle(request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(request instanceof Request_1.default, 'Argument 1 expected Request');
            Exception_1.default.require(response instanceof Response_1.default, 'Argument 2 expected Response');
            if (!(yield this.prepare(request, response))) {
                return false;
            }
            if (!(yield this.process(request, response))) {
                return false;
            }
            if (!(yield this.dispatch(request, response))) {
                return false;
            }
            return true;
        });
    }
    head(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'HEAD', callbacks, priority);
    }
    options(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'OPTIONS', callbacks, priority);
    }
    post(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'POST', callbacks, priority);
    }
    prepare(request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(request instanceof Request_1.default, 'Argument 1 expected Request');
            Exception_1.default.require(response instanceof Response_1.default, 'Argument 2 expected Response');
            let status = types_1.Statuses.OK;
            try {
                status = yield this.router.emit('request', request, response);
            }
            catch (error) {
                response.setStatus(types_1.Statuses.ERROR);
                status = yield this.router.emit('error', error, request, response);
            }
            return status.code !== types_1.Statuses.ABORT.code;
        });
    }
    process(request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(request instanceof Request_1.default, 'Argument 1 expected Request');
            Exception_1.default.require(response instanceof Response_1.default, 'Argument 2 expected Response');
            let status = types_1.Statuses.OK;
            try {
                status = yield this.router.emit(this.event, request, response);
            }
            catch (error) {
                response.setStatus(types_1.Statuses.ERROR);
                status = yield this.router.emit('error', error, request, response);
            }
            if (status.code === types_1.Statuses.ABORT.code) {
                return false;
            }
            if (!response.body && !response.status) {
                response.setStatus(types_1.Statuses.NOT_FOUND);
                const exception = Exception_1.default
                    .for(types_1.Statuses.NOT_FOUND.text)
                    .withCode(types_1.Statuses.NOT_FOUND.code);
                status = yield this.router.emit('error', exception, request, response);
            }
            if (!response.status) {
                response.setStatus(types_1.Statuses.OK);
            }
            return status.code !== types_1.Statuses.ABORT.code;
        });
    }
    put(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'PUT', callbacks, priority);
    }
    trace(...callbacks) {
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 1 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 1} expected Function`);
        }
        return _onMethod.call(this, 'TRACE', callbacks, priority);
    }
}
exports.default = Route;
function _onMethod(method, callbacks, priority) {
    const pattern = this.event
        .replace(/(\:[a-zA-Z0-9\-_]+)/g, '*')
        .replaceAll('*', '([^/]+)')
        .replaceAll('([^/]+)([^/]+)', '(.*)');
    const event = new RegExp(`^${method}\\s${pattern}/*$`, 'ig');
    const main = callbacks.pop();
    function processRoute(req, ...args) {
        for (let i = 0; i < callbacks.length; i++) {
            if (callbacks[i](req, ...args) === false) {
                return;
            }
        }
        return main(req, ...args);
    }
    if (main.name) {
        types_1.Reflection.rename(processRoute, main.name);
    }
    this.router.on(event, processRoute.bind(this), priority);
    return this;
}
