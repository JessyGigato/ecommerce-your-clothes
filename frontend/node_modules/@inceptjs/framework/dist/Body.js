"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const types_1 = require("@inceptjs/types");
const Exception_1 = __importDefault(require("./Exception"));
class Body {
    constructor(body = null, init = {}) {
        this._context = null;
        this._disturbed = false;
        this._url = null;
        let headers = init.headers;
        if (!(headers instanceof node_fetch_1.Headers)) {
            headers = new node_fetch_1.Headers(headers || {});
        }
        this._headers = headers;
        if (body === null && typeof init.body !== 'undefined') {
            body = init.body;
        }
        this._body = body;
        this._context = init.context || null;
        this._resource = init.resource || null;
    }
    get body() {
        return this._getResource().body;
    }
    get ctx() {
        return this._context;
    }
    get bodyUsed() {
        return this._disturbed;
    }
    get filled() {
        return this._body !== null && typeof this._body !== 'undefined';
    }
    get hash() {
        return this._url ? this._url.hash : '';
    }
    get host() {
        return this._url ? this._url.host : '';
    }
    get hostname() {
        return this._url ? this._url.hostname : '';
    }
    get headers() {
        return this._headers;
    }
    get origin() {
        return this._url ? this._url.origin : '';
    }
    get pathname() {
        return this._url ? this._url.pathname : '';
    }
    get password() {
        return this._url ? this._url.password : '';
    }
    get port() {
        return this._url ? this._url.port : '';
    }
    get protocol() {
        return this._url ? this._url.protocol : '';
    }
    get query() {
        const queryString = this.search.substr(1);
        if (!queryString.length) {
            return {};
        }
        const query = new types_1.Store;
        return query.withQuery.set(queryString);
    }
    get resource() {
        return this._resource;
    }
    get search() {
        return this._url ? this._url.search : '';
    }
    get url() {
        return this._url ? this._url.href : '';
    }
    arrayBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            this._disturbed = true;
            const response = this._getResource();
            return yield response.arrayBuffer();
        });
    }
    blob() {
        return __awaiter(this, void 0, void 0, function* () {
            this._disturbed = true;
            const response = this._getResource();
            return yield response.blob();
        });
    }
    formData() {
        return __awaiter(this, void 0, void 0, function* () {
            throw Exception_1.default.for('`formData()` is not implemented');
        });
    }
    parse() {
        return __awaiter(this, void 0, void 0, function* () {
            const type = this.headers.get('content-type');
            switch (true) {
                case type === 'text/json':
                case type === 'application/json':
                    return yield this.json();
                case type === 'application/x-www-form-urlencoded':
                    return yield this.fromURLQuery();
                case (type === null || type === void 0 ? void 0 : type.indexOf('multipart/form-data')) === 0:
                    return yield this.fromFormData();
            }
            return null;
        });
    }
    fromFormData() {
        return __awaiter(this, void 0, void 0, function* () {
            const store = new types_1.Store;
            return store.withFormData.set(yield this.text()).get();
        });
    }
    fromURLQuery() {
        return __awaiter(this, void 0, void 0, function* () {
            const store = new types_1.Store;
            return store.withQuery.set(yield this.text()).get();
        });
    }
    json() {
        return __awaiter(this, void 0, void 0, function* () {
            this._disturbed = true;
            const response = this._getResource();
            return yield response.json();
        });
    }
    text() {
        return __awaiter(this, void 0, void 0, function* () {
            this._disturbed = true;
            const response = this._getResource();
            return yield response.text();
        });
    }
    write(body) {
        this._body = body;
        return this;
    }
}
exports.default = Body;
