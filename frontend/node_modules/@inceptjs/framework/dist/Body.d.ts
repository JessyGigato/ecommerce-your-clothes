import { Headers, Body as NativeBody } from 'node-fetch';
export declare type BodyOptions = {
    headers?: Headers | Record<string, string>;
    body?: any;
    context?: any;
    resource?: any;
};
export default abstract class Body {
    protected _body: any;
    protected _context: any;
    protected _headers: Headers;
    protected _disturbed: boolean;
    protected _resource: any;
    protected _url: URL | null;
    get body(): any;
    get ctx(): any;
    get bodyUsed(): boolean;
    get filled(): boolean;
    get hash(): string;
    get host(): string;
    get hostname(): string;
    get headers(): Headers;
    get origin(): string;
    get pathname(): string;
    get password(): string;
    get port(): string;
    get protocol(): string;
    get query(): Record<string, any>;
    get resource(): any;
    get search(): string;
    get url(): string;
    constructor(body?: any, init?: BodyOptions);
    arrayBuffer(): Promise<ArrayBuffer>;
    blob(): Promise<import("node-fetch").Blob>;
    formData(): Promise<void>;
    parse(): Promise<any>;
    fromFormData(): Promise<any>;
    fromURLQuery(): Promise<any>;
    json(): Promise<any>;
    text(): Promise<string>;
    write(body: any): Body;
    protected abstract _getResource(): NativeBody;
}
