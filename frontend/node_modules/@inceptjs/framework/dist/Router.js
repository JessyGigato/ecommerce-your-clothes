"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@inceptjs/types");
const Route_1 = __importDefault(require("./Route"));
const Request_1 = __importDefault(require("./Request"));
const Response_1 = __importDefault(require("./Response"));
const Exception_1 = __importDefault(require("./Exception"));
class Router extends types_1.EventEmitter {
    constructor() {
        super(...arguments);
        this.handle = (req = null, res = null) => __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(typeof req === 'object', 'Argument 1 expecting Object');
            Exception_1.default.require(typeof res === 'object', 'Argument 2 expecting Object');
            yield this.emit('open', req, res);
            const request = this.makeRequest({
                context: this,
                resource: req
            });
            const response = this.makeResponse({
                context: this,
                resource: res
            });
            const event = request.method + ' ' + request.pathname;
            const route = this.route(event);
            yield route.handle(request, response);
            yield this.emit('dispatch', request, response);
            yield this.emit('close', req, res);
        });
    }
    all(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).all(...callbacks, priority);
        return this;
    }
    connect(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).connect(...callbacks, priority);
        return this;
    }
    delete(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).delete(...callbacks, priority);
        return this;
    }
    get(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).get(...callbacks, priority);
        return this;
    }
    head(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).head(...callbacks, priority);
        return this;
    }
    makeRequest(init = null) {
        var _a;
        if (init === null) {
            return new Request_1.default;
        }
        const { url } = init, requestInit = __rest(init, ["url"]);
        if (typeof url === 'string') {
            return new Request_1.default(url, requestInit);
        }
        if (typeof ((_a = requestInit === null || requestInit === void 0 ? void 0 : requestInit.resource) === null || _a === void 0 ? void 0 : _a.url) === 'string') {
            return new Request_1.default(requestInit.resource.url, requestInit);
        }
        return new Request_1.default(null, requestInit || {});
    }
    makeResponse(init = null) {
        return new Response_1.default(null, init || {});
    }
    options(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).options(...callbacks, priority);
        return this;
    }
    params(request, method, path) {
        Exception_1.default.require(request instanceof Request_1.default, 'Argument 1 expected Request');
        Exception_1.default.require(typeof method === 'string', 'Argument 2 expected String');
        Exception_1.default.require(typeof path === 'string', 'Argument 3 expected String');
        method = method.toUpperCase();
        if (method === 'ALL' || method === '*') {
            method = '[A-Z]+';
        }
        const pattern = path
            .replace(/(\:[a-zA-Z0-9\-_]+)/g, '*')
            .replaceAll('*', '([^/]+)')
            .replaceAll('([^/]+)([^/]+)', '(.*)');
        const route = {
            event: `${request.method} ${request.pathname}`,
            pattern: new RegExp(`^${method}\\s${pattern}/*$`, 'ig'),
            args: [],
            params: {}
        };
        const matches = Array.from(route.event.matchAll(pattern));
        if (!Array.isArray(matches[0]) || !matches[0].length) {
            return route;
        }
        const map = Array.from(path.matchAll(/(\:[a-zA-Z0-9\-_]+)|(\*\*)|(\*)/g)).map(match => match[0]);
        matches[0].slice().forEach((param, i) => {
            if (!i) {
                return;
            }
            if (typeof map[i - 1] !== 'string'
                || map[i - 1].indexOf('*') === 0) {
                if (param.indexOf('/') === -1) {
                    return route.args.push(param);
                }
                return Array.prototype.push.apply(route.args, param.split('/'));
            }
            if (typeof map[i - 1] === 'string') {
                route.params[map[i - 1].substr(1)] = param;
            }
        });
        return route;
    }
    post(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).post(...callbacks, priority);
        return this;
    }
    put(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).put(...callbacks, priority);
        return this;
    }
    redirect(path, response) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected String');
        Exception_1.default.require(response instanceof Response_1.default, 'Argument 2 expected Request');
        response.setStatus(307, 'Temporary Redirect');
        response.headers.set('Location', path);
        return this;
    }
    route(event) {
        Exception_1.default.require(typeof event === 'string', 'Argument 1 expected String');
        return new Route_1.default(event, this);
    }
    routeTo(method, path, request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(typeof method === 'string', 'Argument 1 expected String');
            Exception_1.default.require(typeof path === 'string', 'Argument 2 expected String');
            Exception_1.default.require(request instanceof Request_1.default, 'Argument 3 expected Request');
            Exception_1.default.require(response instanceof Response_1.default, 'Argument 4 expected Response');
            const event = method.toUpperCase() + ' ' + path;
            const route = this.route(event);
            return yield route.handle(request, response);
        });
    }
    trace(path, ...callbacks) {
        Exception_1.default.require(typeof path === 'string', 'Argument 1 expected Stringg');
        Exception_1.default.require(typeof callbacks[0] === 'function', 'Argument 2 expected Function');
        let priority = 0;
        if (typeof callbacks[callbacks.length - 1] === 'number') {
            priority = callbacks.pop();
        }
        for (let i = 0; i < callbacks.length; i++) {
            Exception_1.default.require(typeof callbacks[i] === 'function', `Argument ${i + 2} expected Function`);
        }
        this.route(path).trace(...callbacks, priority);
        return this;
    }
    use(path, ...emitters) {
        if (Array.isArray(path)) {
            path.forEach(path => this.use(path, ...emitters));
            return this;
        }
        if (typeof path === 'function' || path instanceof types_1.EventEmitter) {
            emitters.unshift(path);
        }
        const validPath = typeof path === 'string' || path instanceof RegExp;
        for (const emitter of emitters) {
            if (Array.isArray(emitter)) {
                if (validPath) {
                    this.use(path, ...emitter);
                }
                else {
                    this.use(...emitter);
                }
                continue;
            }
            else if (emitter instanceof types_1.EventEmitter) {
                super.use(emitter);
                continue;
            }
            else if (typeof emitter !== 'function') {
                continue;
            }
            if (validPath) {
                this.all(path, callback);
                continue;
            }
            const wrapper = function (req, res) {
                return new Promise((resolve, reject) => {
                    const next = function (...args) {
                        if (args.length) {
                            reject(...args);
                        }
                        else {
                            resolve(true);
                        }
                    };
                    emitter(req, res, next);
                });
            };
            types_1.Reflection.rename(wrapper, emitter.name);
            this.on('open', wrapper);
        }
        return this;
    }
}
exports.default = Router;
