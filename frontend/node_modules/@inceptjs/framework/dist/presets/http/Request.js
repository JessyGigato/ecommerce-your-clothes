"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestReferrers = exports.RequestRedirects = exports.RequestModes = exports.RequestCredentials = exports.RequestCaches = exports.RequestMethods = void 0;
const http_1 = require("http");
const node_fetch_1 = require("node-fetch");
const cookie_1 = __importDefault(require("cookie"));
const Request_1 = __importStar(require("../../Request"));
Object.defineProperty(exports, "RequestMethods", { enumerable: true, get: function () { return Request_1.RequestMethods; } });
Object.defineProperty(exports, "RequestCaches", { enumerable: true, get: function () { return Request_1.RequestCaches; } });
Object.defineProperty(exports, "RequestCredentials", { enumerable: true, get: function () { return Request_1.RequestCredentials; } });
Object.defineProperty(exports, "RequestModes", { enumerable: true, get: function () { return Request_1.RequestModes; } });
Object.defineProperty(exports, "RequestRedirects", { enumerable: true, get: function () { return Request_1.RequestRedirects; } });
Object.defineProperty(exports, "RequestReferrers", { enumerable: true, get: function () { return Request_1.RequestReferrers; } });
class HTTPRequest extends Request_1.default {
    constructor(url = null, init = {}) {
        super(url, init);
        this._version = '';
        this._cookies = {};
        if (!(init.resource instanceof http_1.IncomingMessage)) {
            return;
        }
        const resource = init.resource;
        let protocol = resource.connection && resource.connection.encrypted
            ? 'https'
            : 'http';
        if (resource.headers['x-forwarded-proto']
            && resource.headers['x-forwarded-proto'].length) {
            if (Array.isArray(resource.headers['x-forwarded-proto'])) {
                protocol = resource.headers['x-forwarded-proto'][0];
            }
            else {
                protocol = resource.headers['x-forwarded-proto'];
            }
            protocol = protocol.trim();
            if (protocol.indexOf(',') !== -1) {
                protocol = protocol.substring(0, protocol.indexOf(',')).trim();
            }
        }
        const host = resource.headers.host;
        this._url = new URL(protocol + '://' + host + resource.url);
        this.params = Object.assign(this.params.get(), this.query);
        if (typeof resource.headers === 'object') {
            this._headers = new node_fetch_1.Headers(Object.assign({}, resource.headers));
        }
        if (typeof resource.httpVersion === 'string') {
            this._version = resource.httpVersion;
        }
        this._method = (resource.method || Request_1.RequestMethods.GET).toUpperCase();
        const cookies = this.headers.get('cookie');
        if (typeof cookies === 'string' && cookies.length) {
            this._cookies = cookie_1.default.parse(cookies);
        }
    }
    get cookies() {
        return Object.assign({}, this._cookies);
    }
}
exports.default = HTTPRequest;
