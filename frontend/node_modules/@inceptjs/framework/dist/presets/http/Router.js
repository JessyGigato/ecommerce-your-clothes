"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const http_1 = require("http");
const mime_1 = __importDefault(require("mime"));
const Pluggable_1 = __importDefault(require("../Pluggable"));
const Exception_1 = __importDefault(require("../../Exception"));
const Request_1 = __importDefault(require("./Request"));
const Response_1 = __importDefault(require("./Response"));
class HTTPRouter extends Pluggable_1.default {
    constructor() {
        super(...arguments);
        this.handle = (im, sr) => __awaiter(this, void 0, void 0, function* () {
            Exception_1.default.require(im instanceof http_1.IncomingMessage, 'Argument 1 expecting IncomingMessage');
            Exception_1.default.require(sr instanceof http_1.ServerResponse, 'Argument 2 expecting Object');
            yield this.emit('open', im, sr);
            if (sr.headersSent) {
                return;
            }
            const request = this.makeRequest({
                context: this,
                resource: im
            });
            const response = this.makeResponse({
                context: this,
                resource: sr
            });
            const event = request.method + ' ' + request.pathname;
            const route = this.route(event);
            yield route.handle(request, response);
            yield this.emit('dispatch', request, response);
            yield this.emit('close', im, sr);
        });
    }
    makeRequest(init = null) {
        if (init === null) {
            return new Request_1.default;
        }
        const { url } = init, requestInit = __rest(init, ["url"]);
        if (typeof url === 'string') {
            return new Request_1.default(url, requestInit);
        }
        if ((requestInit === null || requestInit === void 0 ? void 0 : requestInit.resource) instanceof http_1.IncomingMessage) {
            const resource = requestInit.resource;
            let protocol = resource.connection && resource.connection.encrypted
                ? 'https'
                : 'http';
            if (resource.headers['x-forwarded-proto']
                && resource.headers['x-forwarded-proto'].length) {
                if (Array.isArray(resource.headers['x-forwarded-proto'])) {
                    protocol = resource.headers['x-forwarded-proto'][0];
                }
                else {
                    protocol = resource.headers['x-forwarded-proto'];
                }
                protocol = protocol.trim();
                if (protocol.indexOf(',') !== -1) {
                    protocol = protocol.substring(0, protocol.indexOf(',')).trim();
                }
            }
            const host = resource.headers.host;
            return new Request_1.default(protocol + '://' + host + resource.url, requestInit);
        }
        return new Request_1.default(null, requestInit || {});
    }
    makeResponse(init = null) {
        return new Response_1.default(null, init || {});
    }
    public(root, base = '') {
        Exception_1.default.require(typeof root === 'string', 'Argument 1 expected String');
        Exception_1.default.require(typeof base === 'string', 'Argument 2 expected String');
        const pattern = (base + '/**').replace(/\/\//g, '/');
        this.all(pattern, (request, response) => {
            if (response.body !== null) {
                return;
            }
            const pathname = request.pathname.substr(base.length);
            let file = path_1.default.join(root, pathname);
            if (!fs_1.default.existsSync(file) || !fs_1.default.lstatSync(file).isFile()) {
                file = path_1.default.join(file, '/index.html').replace(/\/\//g, '/');
                if (!fs_1.default.existsSync(file) || !fs_1.default.lstatSync(file).isFile()) {
                    return;
                }
            }
            const mimeType = mime_1.default.getType(file);
            if (typeof mimeType === 'string') {
                response.headers.set('Content-Type', mimeType);
            }
            response.write(fs_1.default.createReadStream(file));
        }, 10000);
        return this;
    }
}
exports.default = HTTPRouter;
