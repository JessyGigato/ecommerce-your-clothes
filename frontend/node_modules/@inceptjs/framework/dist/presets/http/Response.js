"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseTypes = void 0;
const cookie_1 = __importDefault(require("cookie"));
const Exception_1 = __importDefault(require("../../Exception"));
const Response_1 = __importStar(require("../../Response"));
Object.defineProperty(exports, "ResponseTypes", { enumerable: true, get: function () { return Response_1.ResponseTypes; } });
class HTTPResponse extends Response_1.default {
    setCookie(name, value, options = {}) {
        Exception_1.default.require(typeof name === 'string', 'Argument 1 expected String');
        if (value && typeof value === 'object') {
            Object.keys(value).forEach(key => {
                this.setCookie(`${name}[${key}]`, value[key], options);
            });
            return this;
        }
        Exception_1.default.require(typeof value === 'string' || typeof value === 'number', 'Argument 2 expected String|Number');
        Exception_1.default.require(typeof value === 'object', 'Argument 3 expected Object');
        const serialized = cookie_1.default.serialize(name, String(value), options);
        this.headers.append('Set-Cookie', serialized);
        return this;
    }
}
exports.default = HTTPResponse;
