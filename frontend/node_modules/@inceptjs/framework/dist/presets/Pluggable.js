"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseTypes = exports.RequestReferrers = exports.RequestRedirects = exports.RequestModes = exports.RequestCredentials = exports.RequestCaches = exports.RequestMethods = exports.TaskQueue = exports.Store = exports.Statuses = exports.Reflection = exports.Exception = exports.EventEmitter = exports.Router = exports.Route = exports.Response = exports.Request = void 0;
const types_1 = require("@inceptjs/types");
Object.defineProperty(exports, "EventEmitter", { enumerable: true, get: function () { return types_1.EventEmitter; } });
Object.defineProperty(exports, "Reflection", { enumerable: true, get: function () { return types_1.Reflection; } });
Object.defineProperty(exports, "Statuses", { enumerable: true, get: function () { return types_1.Statuses; } });
Object.defineProperty(exports, "Store", { enumerable: true, get: function () { return types_1.Store; } });
Object.defineProperty(exports, "TaskQueue", { enumerable: true, get: function () { return types_1.TaskQueue; } });
const Request_1 = __importStar(require("../Request"));
exports.Request = Request_1.default;
Object.defineProperty(exports, "RequestMethods", { enumerable: true, get: function () { return Request_1.RequestMethods; } });
Object.defineProperty(exports, "RequestCaches", { enumerable: true, get: function () { return Request_1.RequestCaches; } });
Object.defineProperty(exports, "RequestCredentials", { enumerable: true, get: function () { return Request_1.RequestCredentials; } });
Object.defineProperty(exports, "RequestModes", { enumerable: true, get: function () { return Request_1.RequestModes; } });
Object.defineProperty(exports, "RequestRedirects", { enumerable: true, get: function () { return Request_1.RequestRedirects; } });
Object.defineProperty(exports, "RequestReferrers", { enumerable: true, get: function () { return Request_1.RequestReferrers; } });
const Response_1 = __importStar(require("../Response"));
exports.Response = Response_1.default;
Object.defineProperty(exports, "ResponseTypes", { enumerable: true, get: function () { return Response_1.ResponseTypes; } });
const Route_1 = __importDefault(require("../Route"));
exports.Route = Route_1.default;
const Router_1 = __importDefault(require("../Router"));
const Exception_1 = __importDefault(require("../Exception"));
exports.Exception = Exception_1.default;
class Pluggable extends Router_1.default {
    constructor() {
        super(...arguments);
        this.plugins = {};
    }
    bootstrap(callback) {
        Exception_1.default.require(typeof callback === 'function', 'Argument 1 expected Function');
        callback.call(this, this);
        return this;
    }
    plugin(name, definition) {
        Exception_1.default.require(typeof name === 'string', 'Argument 1 expected String');
        if (typeof definition === 'object') {
            Exception_1.default.require(!this.plugins[name], 'Plugin `%s` already exists', name);
            this.plugins[name] = definition;
        }
        if (!this.plugins[name]) {
            return false;
        }
        return this.plugins[name];
    }
}
exports.default = Pluggable;
exports.Router = Pluggable;
