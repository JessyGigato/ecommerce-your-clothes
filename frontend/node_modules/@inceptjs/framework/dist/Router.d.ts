import { EventEmitter } from '@inceptjs/types';
import Route from './Route';
import Request from './Request';
import Response from './Response';
export interface Params {
    event: string;
    pattern: RegExp;
    args: any[];
    params: Record<string, any>;
}
export default class Router extends EventEmitter {
    all(path: string, ...callbacks: any[]): Router;
    connect(path: string, ...callbacks: any[]): Router;
    delete(path: string, ...callbacks: any[]): Router;
    get(path: string, ...callbacks: any[]): Router;
    handle: Function;
    head(path: string, ...callbacks: any[]): Router;
    makeRequest(init?: Record<string, any> | null): Request;
    makeResponse(init?: Record<string, any> | null): Response;
    options(path: string, ...callbacks: any[]): Router;
    params(request: Request, method: string, path: string): Params;
    post(path: string, ...callbacks: any[]): Router;
    put(path: string, ...callbacks: any[]): Router;
    redirect(path: string, response: Response): Router;
    route(event: string): Route;
    routeTo(method: string, path: string, request: Request, response: Response): Promise<boolean>;
    trace(path: string, ...callbacks: any[]): Router;
    use(path: any, ...emitters: any): this;
}
