"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Status_1 = __importDefault(require("./Status"));
const Exception_1 = __importDefault(require("./Exception"));
class TaskQueue {
    constructor() {
        this.tasks = [];
        this.lower = 0;
        this.upper = 0;
    }
    get length() {
        return this.tasks.length;
    }
    add(callback, priority = 0) {
        Exception_1.default.require(typeof callback === 'function', 'Argument 1 expected Function');
        Exception_1.default.require(typeof priority === 'number', 'Argument 2 expected Number');
        if (priority > this.upper) {
            this.upper = priority;
        }
        else if (priority < this.lower) {
            this.lower = priority;
        }
        this.tasks.push({ callback, priority });
        this.tasks.sort((a, b) => {
            return a.priority <= b.priority ? 1 : -1;
        });
        return this;
    }
    push(callback) {
        Exception_1.default.require(typeof callback === 'function', 'Argument 1 expected Function');
        return this.add(callback, this.lower - 1);
    }
    shift(callback) {
        Exception_1.default.require(typeof callback === 'function', 'Argument 1 expected Function');
        return this.add(callback, this.upper + 1);
    }
    then(callback) {
        Exception_1.default.require(typeof callback === 'function', 'Argument 1 expected Function');
        this.run().then(status => callback(status));
        return this;
    }
    run(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.tasks.length) {
                return Status_1.default.NOT_FOUND;
            }
            while (this.tasks.length) {
                const task = this.tasks.shift();
                if ((yield task.callback(...args)) === false) {
                    return Status_1.default.ABORT;
                }
            }
            return Status_1.default.OK;
        });
    }
    runSync(...args) {
        if (!this.tasks.length) {
            return Status_1.default.NOT_FOUND;
        }
        while (this.tasks.length) {
            const task = this.tasks.shift();
            if (task.callback(...args) === false) {
                return Status_1.default.ABORT;
            }
        }
        return Status_1.default.OK;
    }
}
exports.default = TaskQueue;
