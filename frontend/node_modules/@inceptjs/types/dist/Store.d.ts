/// <reference types="node" />
declare type Index = string | number;
export default class Store {
    data: Record<string, any>;
    withArgs: Args;
    withFormData: FormData;
    withPath: Path;
    withQuery: Query;
    constructor(data?: Record<string, any>);
    each(...path: any[]): Promise<boolean>;
    get(...path: Index[]): any;
    has(...path: Index[]): boolean;
    remove(...path: Index[]): Store;
    set(...path: any[]): Store;
}
export declare class File {
    data: Buffer | string;
    name: string;
    type: string;
    constructor(file: FileType);
}
export declare type FileType = {
    data: Buffer | string;
    name: string;
    type: string;
};
declare class Args {
    store: Store;
    constructor(store: Store);
    set(...path: any[]): Store;
    protected _format(path: Index[], key: Index, value: any, override?: boolean): Store;
}
declare class Path {
    store: Store;
    constructor(store: Store);
    each(notation: string, callback: Function, separator?: string): Promise<boolean>;
    get(notation: string, separator?: string): any;
    has(notation: string, separator?: string): boolean;
    remove(notation: string, separator?: string): Store;
    set(notation: string, value: any, separator?: string): Store;
}
declare class Query {
    store: Store;
    constructor(store: Store);
    set(...path: any[]): Store;
}
declare class FormData {
    store: Store;
    constructor(store: Store);
    set(...path: any[]): Store;
    protected _getBoundary(buffer: Buffer): string | null;
    protected _getLine(buffer: Buffer, i: number): Record<string, any> | null;
    protected _getPart(lines: Buffer[]): Record<string, any>;
    protected _setPart(path: string[], part: Record<string, any>): Store | this | undefined;
}
export {};
