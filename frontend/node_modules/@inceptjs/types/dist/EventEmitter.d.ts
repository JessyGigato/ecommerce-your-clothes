import TaskQueue, { Task, Queue } from './TaskQueue';
export default class EventEmitter {
    readonly listeners: Record<string, Task[]>;
    event: Event;
    protected regexp: string[];
    static makeQueue(): TaskQueue;
    emit(event: string, ...args: any[]): Promise<import("./Status").Status>;
    emitSync(event: string, ...args: any[]): import("./Status").Status;
    inspect(event: string): Task[];
    match(event: string): Record<string, Event>;
    on(event: Eventable, callback: Function, priority?: number): EventEmitter;
    unbind(event?: string, callback?: Function): EventEmitter;
    use(...emitters: EventEmitter[]): EventEmitter;
}
export interface Event {
    event: string;
    pattern: string;
    parameters: string[];
    args?: any[];
    callback?: Function;
    priority?: number;
}
export interface Emitter {
    listeners: Record<string, Queue>;
    emit(event: string, ...args: any[]): Promise<any>;
    on(event: string | string[] | RegExp, callback: Function, priority: number): Emitter;
}
export declare type Eventable = string | RegExp | (string | RegExp)[];
